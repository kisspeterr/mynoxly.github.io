import { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Session, User } from '@supabase/supabase-js';
import { showError } from '@/utils/toast';
import { useQuery } from '@tanstack/react-query';

// üîπ Profile t√°bla defin√≠ci√≥
interface Profile {
  id: string;
  first_name: string | null;
  last_name: string | null;
  avatar_url: string | null;
  role: 'user' | 'admin';
  organization_name: string | null;
  logo_url: string | null;
}

// üîπ Profil lek√©rdez√©se profile t√°bl√°b√≥l
const fetchProfile = async (userId: string): Promise<Profile | null> => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('id, first_name, last_name, avatar_url, role, organization_name, logo_url')
      .eq('id', userId)
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error('Error fetching profile:', error);
      return null;
    }
    return data as Profile;
  } catch (e) {
    console.error('Unexpected error during profile fetch:', e);
    return null;
  }
};

// üîπ Session √©s Profil adatok lek√©rdez√©se
interface AuthData {
    session: Session | null;
    user: User | null;
    profile: Profile | null;
}

const fetchAuthData = async (): Promise<AuthData> => {
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
        console.error('Supabase getSession error:', sessionError);
        // Ha a session hiba, akkor nincs felhaszn√°l√≥
        return { session: null, user: null, profile: null };
    }
    
    const user = session?.user || null;
    let profile: Profile | null = null;
    
    if (user) {
        profile = await fetchProfile(user.id);
    }
    
    return { session, user, profile };
};


export const useAuth = () => {
  // React Query haszn√°lata a kezdeti bet√∂lt√©shez √©s √∫jrapr√≥b√°lkoz√°shoz
  const { data, isLoading, refetch } = useQuery<AuthData>({
    queryKey: ['authSession'],
    queryFn: fetchAuthData,
    staleTime: Infinity, // A session adatok csak auth esem√©nyre friss√ºlnek
    retry: 3, // 3 √∫jrapr√≥b√°lkoz√°s hiba eset√©n
    retryDelay: 1000,
  });
  
  // üîπ Realtime Auth esem√©nyek figyel√©se
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        // Ha bejelentkez√©s, kijelentkez√©s vagy token friss√≠t√©s t√∂rt√©nik, 
        // k√©nyszer√≠tj√ºk a React Query cache friss√≠t√©s√©t.
        if (event === 'SIGNED_IN' || event === 'SIGNED_OUT' || event === 'TOKEN_REFRESHED' || event === 'INITIAL_SESSION') {
            // A refetch h√≠v√°s automatikusan be√°ll√≠tja az isLoading √°llapotot true-ra, 
            // majd friss√≠ti az adatokat.
            refetch();
        }
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, [refetch]);
  
  // üîπ Kijelentkez√©s
  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) {
      showError('Hiba t√∂rt√©nt a kijelentkez√©s sor√°n.');
      console.error('Sign out error:', error);
    } else {
        // K√©zi cache invalid√°l√°s kijelentkez√©s ut√°n
        refetch();
    }
  };
  
  // üîπ Profil friss√≠t√©s√©nek k√©nyszer√≠t√©se (pl. be√°ll√≠t√°sok ment√©se ut√°n)
  const forceProfileRefetch = useCallback(async (userId: string) => {
      // K√©zzel friss√≠tj√ºk a profilt, majd friss√≠tj√ºk a query cache-t
      const newProfile = await fetchProfile(userId);
      
      // Mivel a queryKey 'authSession', a refetch friss√≠ti az √∂sszes adatot.
      // A legegyszer≈±bb, ha csak refetch-et h√≠vunk, de ha azonnali friss√≠t√©s kell, 
      // akkor a queryClient.setQueryData-t kellene haszn√°lni.
      // Maradunk a refetch-n√©l, ami a legbiztons√°gosabb.
      refetch();
  }, [refetch]);


  // üîπ Visszat√©r≈ë √©rt√©kek
  return {
    session: data?.session || null,
    user: data?.user || null,
    profile: data?.profile || null,
    isLoading: isLoading,
    signOut,
    isAdmin: data?.profile?.role === 'admin',
    isAuthenticated: !!data?.user,
    fetchProfile: forceProfileRefetch, // Export√°ljuk a k√©nyszer√≠tett friss√≠t√©st
  };
};
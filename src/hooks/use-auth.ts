import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Session, User } from '@supabase/supabase-js';
import { showError } from '@/utils/toast';

// üîπ Profile t√°bla defin√≠ci√≥
interface Profile {
  id: string;
  first_name: string | null;
  last_name: string | null;
  avatar_url: string | null;
  role: 'user' | 'admin';
  organization_name: string | null;
  logo_url: string | null;
}

// üîπ Auth √°llapot
interface AuthState {
  session: Session | null;
  user: User | null;
  profile: Profile | null;
  isLoading: boolean;
}

// üîπ Kezd≈ë√©rt√©k
const initialAuthState: AuthState = {
  session: null,
  user: null,
  profile: null,
  isLoading: true, // CRITICAL: Must be true initially
};

export const useAuth = () => {
  const [authState, setAuthState] = useState<AuthState>(initialAuthState);

  // üîπ Profil lek√©rdez√©se profile t√°bl√°b√≥l
  const fetchProfile = async (userId: string): Promise<Profile | null> => {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('id, first_name, last_name, avatar_url, role, organization_name, logo_url')
        .eq('id', userId)
        .single();

      if (error && error.code !== 'PGRST116') {
        console.error('Error fetching profile:', error);
        // Nem dobunk hib√°t, csak null-t adunk vissza
        return null;
      }
      return data as Profile;
    } catch (e) {
      console.error('Unexpected error during profile fetch:', e);
      return null;
    }
  };

  // üîπ √Ållapot friss√≠t√©se (seg√©df√ºggv√©ny)
  const updateAuthState = async (session: Session | null) => {
    let user = session?.user || null;
    let profile: Profile | null = null;

    if (user) {
      // 1. Profil bet√∂lt√©se, ha van felhaszn√°l√≥
      profile = await fetchProfile(user.id);
    }

    // 2. √Ållapot friss√≠t√©se - MINDIG befejez≈ëdik
    setAuthState({
      session: session,
      user: user,
      profile: profile,
      isLoading: false, // CRITICAL: It MUST be false here.
    });
  };

  // ‚úÖ Teljes auth-logika egy useEffect-ben
  useEffect(() => {
    let isMounted = true;

    // 1Ô∏è‚É£ Kezdeti bet√∂lt√©s
    const initialLoad = async () => {
      try {
        const { data: sessionData } = await supabase.auth.getSession();
        
        if (isMounted) {
            // Friss√≠tj√ºk az √°llapotot a session √©s a profil adatokkal
            await updateAuthState(sessionData.session);
        }

      } catch (err) {
        console.error('Initial auth load failed:', err);
        if (isMounted) {
            // Hiba eset√©n is be kell fejezni a bet√∂lt√©st
            setAuthState(prev => ({ ...prev, isLoading: false }));
        }
      }
    };

    initialLoad();

    // 2Ô∏è‚É£ Auth esem√©nyek (login/logout/token refresh)
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (!isMounted) return;

        // Ha bejelentkez√©s vagy token friss√≠t√©s t√∂rt√©nik, ideiglenesen be√°ll√≠tjuk a bet√∂lt√©st true-ra,
        // hogy a UI ne villanjon fel a r√©gi adatokkal, am√≠g az √∫j profil be nem t√∂lt≈ëdik.
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED' || event === 'INITIAL_SESSION') {
            setAuthState(prev => ({ ...prev, isLoading: true }));
        }
        
        // Friss√≠tj√ºk az √°llapotot az √∫j sessionnel √©s a hozz√° tartoz√≥ profillal
        await updateAuthState(session);
      }
    );

    // 3Ô∏è‚É£ Takar√≠t√°s mem√≥riahib√°k ellen
    return () => {
      isMounted = false;
      subscription.unsubscribe();
    };
  }, []); // Dependency array is empty, runs only once on mount
  
  // üîπ Kijelentkez√©s
  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) {
      showError('Hiba t√∂rt√©nt a kijelentkez√©s sor√°n.');
      console.error('Sign out error:', error);
    }
  };

  // üîπ Visszat√©r≈ë √©rt√©kek
  return {
    ...authState,
    signOut,
    isAdmin: authState.profile?.role === 'admin',
    isAuthenticated: !!authState.user,
    fetchProfile,
  };
};